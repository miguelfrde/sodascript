
:tokens:
  :and:         !ruby/regexp   /^(and|&&)$/
  :or:          !ruby/regexp   /^(or|\|\|)$/
  :not:         !ruby/regexp   /^(not|!)$/
  :if:          !ruby/regexp   /^if$/
  :unless:      !ruby/regexp   /^unless$/
  :else:        !ruby/regexp   /^else$/
  :elsif:       !ruby/regexp   /^elsif$/
  :while:       !ruby/regexp   /^while$/
  :until:       !ruby/regexp   /^until$/
  :for:         !ruby/regexp   /^for$/
  :in:          !ruby/regexp   /^in$/
  :class:       !ruby/regexp   /^class$/
  :case:        !ruby/regexp   /^case$/
  :when:        !ruby/regexp   /^when$/
  :default:     !ruby/regexp   /^default$/
  :continue:    !ruby/regexp   /^continue$/
  :break:       !ruby/regexp   /^break$/
  :return:      !ruby/regexp   /^return$/
  :function:    !ruby/regexp   /^function$/
  :null:        !ruby/regexp   /^null$/
  :do:          !ruby/regexp   /^do$/
  :end:         !ruby/regexp   /^end$/
  :print:       !ruby/regexp   /^print$/
  :true:        !ruby/regexp   /^true$/
  :false:       !ruby/regexp   /^false$/
  :readable:    !ruby/regexp   /^readable$/
  :writable:    !ruby/regexp   /^writable$/
  :attribute:   !ruby/regexp   /^attribute$/
  :private:     !ruby/regexp   /^private$/
  :string:      !ruby/regexp   /^("[^"]*"|'[^']*')$/
  :dec_num:     !ruby/regexp   /^(\d+(\.\d*)?|\.\d+)([Ee][+-]?\d+)?$/
  :hex_num:     !ruby/regexp   /^0x[0-9a-fA-F]+$/
  :bin_num:     !ruby/regexp   /^0b[01]+$/
  :oct_num:     !ruby/regexp   /^0[0-7]+$/
  :constant:    !ruby/regexp   /^[A-Z][A-Z\d_]+$/
  :name:        !ruby/regexp   /^([a-zA-Z_]*[a-z][\w\-]*)$/
  :regex:       !ruby/regexp   /^/([^/\#]|\/|\\\#)*/$/
  :',':         !ruby/regexp   /^\,$/
  :'.':         !ruby/regexp   /^\.$/
  :'(':         !ruby/regexp   /^\($/
  :')':         !ruby/regexp   /^\)$/
  :'[':         !ruby/regexp   /^\[$/
  :']':         !ruby/regexp   /^\]$/
  :'{':         !ruby/regexp   /^\{$/
  :'}':         !ruby/regexp   /^\}$/
  :'::':        !ruby/regexp   /^:$/
  :'>':         !ruby/regexp   /^>$/
  :'<':         !ruby/regexp   /^<$/
  :'>=':        !ruby/regexp   /^>=$/
  :'<=':        !ruby/regexp   /^<=$/
  :'==':        !ruby/regexp   /^==$/
  :'!=':        !ruby/regexp   /^!=$/
  :'==':        !ruby/regexp   /^==$/
  :'=':         !ruby/regexp   /^=$/
  :'!=':        !ruby/regexp   /^!=$/
  :'~=':        !ruby/regexp   /^~=$/
  :'!~':        !ruby/regexp   /^!~$/
  :'+=':        !ruby/regexp   /^\+=$/
  :'-=':        !ruby/regexp   /^-=$/
  :'*=':        !ruby/regexp   /^\*=$/
  :'/=':        !ruby/regexp   /^\/=$/
  :'**=':       !ruby/regexp   /^\*\*=$/
  :'%=':        !ruby/regexp   /^%=$/
  :'>>=':       !ruby/regexp   /^>>=$/
  :'<<=':       !ruby/regexp   /^<<=$/
  :'&=':        !ruby/regexp   /^&=$/
  :'|=':        !ruby/regexp   /^\|=$/
  :'^=':        !ruby/regexp   /^^=$/
  :'=~':        !ruby/regexp   /^=~$/
  :'!=':        !ruby/regexp   /^!=$/
  :'=':         !ruby/regexp   /^=$/
  :'+':         !ruby/regexp   /^\+$/
  :'-':         !ruby/regexp   /^-$/
  :'*':         !ruby/regexp   /^\*$/
  :'**':        !ruby/regexp   /^\*\*$/
  :'/':         !ruby/regexp   /^/$/
  :'%':         !ruby/regexp   /^%$/
  :'<<':        !ruby/regexp   /^<<$/
  :'>>':        !ruby/regexp   /^>>$/
  :'&':         !ruby/regexp   /^&$/
  :'|':         !ruby/regexp   /^\|$/
  :'~':         !ruby/regexp   /^~$/
  :'^':         !ruby/regexp   /^\^$/

:ignore:
  :comment:     !ruby/regexp   /^\#.+\$$/

:grammar:
  :PROGRAM:
    - - :epsilon
      - 'Block.new([])'
    - - :SUPERPROGRAM
      - 'syms[0]'
  :SUPERPROGRAM:
    - - :ANYTHING
      - 'syms[0]'
    - - :ANYTHING
      - :br
      - :SUPERPROGRAM
      - 'Block.new(syms[0].block + syms[2].block)'
  :ANYTHING:
    - - :INLINE_BLOCK
      - 'Block.new([syms[0]])'
    - - :CLASS
      - 'Block.new([syms[0]])'
    - - :CONTROL_STRUCT
      - 'Block.new([syms[0]])'
    - - :FUNCTION
      - 'Block.new([syms[0]])'
  :BLOCK_SUITE:
    - - :br
      - :BLOCK
      - 'syms[1]'
    - - :BLOCK
      - 'syms[0]'
  :BLOCK:
    - - :CONTROL_STRUCT
      - :br
      - :BLOCK
      - 'Block.new([syms[0]] + syms[2].block)'
    - - :INLINE_BLOCK
      - :br
      - :BLOCK
      - 'Block.new([syms[0]] + syms[2].block)'
    - - :CONTROL_STRUCT
      - :br
      - 'Block.new([syms[0]])'
    - - :INLINE_BLOCK_SUITE
      - 'Block.new([syms[0]])'
  :INLINE_BLOCK_SUITE:
    - - :INLINE_BLOCK
      - 'Block.new([syms[0]])'
    - - :INLINE_BLOCK
      - :br
      - 'Block.new([syms[0]])'
  :INLINE_BLOCK:
    - - :ASSIGN
      - 'syms[0]'
    - - :PRINT
      - 'syms[0]'
    - - :break
      - 'LoopControl.new("break")'
    - - :continue
      - 'LoopControl.new("continue")'
    - - :RETURN
      - 'syms[0]'
    - - :NAME
      - :(
      - :FUN_ARGS
      - :)
      - 'FunctionCall.create(syms[0], syms[2])'
    - - :NAME
      - :(
      - :)
      - 'FunctionCall.create(syms[0])'
  :PRINT:
    - - :print
      - :PRINT_ARGS
      - 'Print.new(syms[1])'
  :NUMBER:
    - - :dec_num
      - 'Expression.new([], syms[0].lexeme)'
    - - :hex_num
      - 'Expression.new([], syms[0].lexeme)'
    - - :bin_num
      - 'Expression.new([], syms[0].lexeme)'
    - - :oct_num
      - 'Expression.new([], syms[0].lexeme)'
  :ASSIGN_OP:
    - - :+=
      - '"+="'
    - - :-=
      - '"-="'
    - - :*=
      - '"*="'
    - - :/=
      - '"/="'
    - - :**=
      - '"**="'
    - - :%=
      - '"%="'
    - - :>>=
      - '">>="'
    - - :<<=
      - '"<<="'
    - - :&=
      - '"&="'
    - - :|=
      - '"|="'
    - - :^=
      - '"^="'
    - - :=~
      - '"=~"'
    - - :!=
      - '"!="'
    - - :=
      - '"="'
  :COMPARE_OP:
    - - :>
      - '">"'
    - - :<
      - '"<"'
    - - :>=
      - '">="'
    - - :<=
      - '"<="'
    - - :==
      - '"=="'
    - - :!=
      - '"!="'
    - - :~=
      - '"~="'
    - - :!~
      - '"!~"'
  :BOOLEAN_OP:
    - - :true
      - '"true"'
    - - :false
      - '"false"'
  :ATTRIBUTE_ACCESSOR:
    - - :readable
      - '"readable"'
    - - :writable
      - '"writable"'
    - - :attribute
      - '"attribute"'
    - - :private
      - '"private"'
  :NAME:
    - - :ALL_NAME
      - 'syms[0]'
    - - :ALL_NAME
      - :.
      - :NAME
      - 'Variable.new(syms[0].name, "#{syms[0]}.#{syms[2]}", syms[0].variables)'
  :ALL_NAME:
    - - :name
      - :{
      - :EXPR
      - :}
      - 'Variable.new(syms[0].lexeme, syms[0].lexeme + "{" + syms[2].to_s + "}", syms[2].variables)'
    - - :name
      - :[
      - :EXPR
      - :]
      - 'Variable.new(syms[0].lexeme, syms[0].lexeme + "[" + syms[2].to_s + "]", syms[2].variables)'
    - - :name
      - 'Variable.new(syms[0].lexeme, syms[0].lexeme, [])'
  :CALLABLE_NAME:
    - - :NAME
      - 'syms[0]'
    - - :NAME
      - :(
      - :)
      - 'FunctionCall.create(syms[0])'
    - - :NAME
      - :(
      - :FUN_ARGS
      - :)
      - 'FunctionCall.create(syms[0], syms[2])'
  :FUN_ARGS:
    - - :EXPR
      - '[syms[0]]'
    - - :EXPR
      - :,
      - :FUN_ARGS
      - '[syms[0]] + syms[2]'
  :CONTROL_STRUCT:
    - - :IF_STMT
      - 'syms[0]'
    - - :WHILE_STMT
      - 'syms[0]'
    - - :UNLESS_STMT
      - 'syms[0]'
    - - :UNTIL_STMT
      - 'syms[0]'
    - - :FOR_STMT
      - 'syms[0]'
    - - :CASE_STMT
      - 'syms[0]'
  :ASSIGN:
    - - :NAME
      - :ASSIGN_OP
      - :EXPR
      - 'Assign.new(syms[0], syms[1], syms[2])'
    - - :NAME
      - :ASSIGN_OP
      - :EXPR
      - :if
      - :EXPR
      - :else
      - :EXPR
      - 'Assign.new(syms[0], syms[1], syms[2], InlineCondition.new(syms[4], syms[6]))'
  :PRINT_ARGS:
    - - :EXPR
      - 'syms[0]'
    - - :EXPR
      - :,
      - :PRINT_ARGS
      - 'Expression.new(syms[0].variables + syms[2].variables, "#{syms[0]},#{syms[2]}")'
  :RANGE:
    - - :RANGE_ITEM
      - :'::'
      - :RANGE_ITEM
      - 'Range.new(syms[0], syms[2])'
    - - :RANGE_ITEM
      - :'::'
      - :RANGE_ITEM
      - :,
      - :RANGE_ITEM
      - 'Range.new(syms[0], syms[2], syms[4])'
  :RANGE_ITEM:
    - - :NUMBER
      - 'syms[0]'
    - - :CALLABLE_NAME
      - 'syms[0]'
  :CLASS:
    - - :class
      - :name
      - :br
      - :CLASS_BODY_SUITE
      - :end
      - 'Class.new(syms[1].lexeme, syms[3])'
  :CLASS_BODY_SUITE:
    - - :CLASS_BODY
      - :br
      - '[syms[0]]'
    - - :CLASS_BODY
      - :br
      - :CLASS_BODY_SUITE
      - '[syms[0]] + syms[2]'
  :CLASS_BODY:
    - - :ATTR_ACCESSORS
      - 'syms[0]'
    - - :METHOD
      - 'syms[0]'
  :METHOD:
    - - :FUNCTION
      - 'syms[0]'
  :FUNCTION:
    - - :function
      - :name
      - :(
      - :PARAMETERS
      - :)
      - :BLOCK_SUITE
      - :end
      - 'Function.new(syms[1].lexeme, syms[3], syms[5])'
  :PARAMETERS:
    - - :MULTIPLE_PARAMETERS
      - 'syms[0]'
    - - :epsilon
      - '[]'
  :MULTIPLE_PARAMETERS:
    - - :name
      - :,
      - :MULTIPLE_PARAMETERS
      - '[syms[0].lexeme] + syms[2]'
    - - :name
      - '[syms[0].lexeme]'
  :RETURN:
    - - :return
      - :EXPR
      - 'Return.new(syms[1])'
    - - :return
      - 'Return.new()'
  :ATTR_ACCESSORS:
    - - :ATTRIBUTE_ACCESSOR
      - :ACCESSOR_CONTENT
      - 'AttributeAccessor.new(syms[0], syms[1])'
  :ACCESSOR_CONTENT:
    - - :name
      - '[syms[0].lexeme]'
    - - :name
      - :,
      - :ACCESSOR_CONTENT
      - '[syms[0].lexeme] + syms[2]'
  :IF_STMT:
    - - :if
      - :EXPR
      - :do
      - :BLOCK_SUITE
      - :ELSIFS
      - :ELSE
      - 'If.new(syms[1], syms[3], Block.new(syms[4]), syms[5])'
  :ELSIFS:
    - - :elsif
      - :EXPR
      - :do
      - :BLOCK_SUITE
      - :ELSIFS
      - '[Elsif.new(syms[1], syms[3])] + syms[4]'
    - - :epsilon
      - '[]'
  :ELSE:
    - - :else
      - :BLOCK_SUITE
      - :end
      - 'syms[1]'
    - - :end
      - '[]'
  :UNLESS_STMT:
    - - :unless
      - :EXPR
      - :do
      - :BLOCK_SUITE
      - :ELSE
      - 'Unless.new(syms[1], syms[3], syms[4])'
  :WHILE_STMT:
    - - :while
      - :EXPR
      - :do
      - :BLOCK_SUITE
      - :end
      - 'While.new(syms[1], syms[3])'
  :FOR_STMT:
    - - :for
      - :name
      - :in
      - :FOR_STMT_AUX
      - :do
      - :BLOCK_SUITE
      - :end
      - 'For.new(Variable.new(syms[1].lexeme, syms[1].lexeme, []), syms[3], syms[5])'
  :FOR_STMT_AUX:
    - - :RANGE
      - 'syms[0]'
    - - :LIST
      - 'syms[0]'
  :UNTIL_STMT:
    - - :until
      - :EXPR
      - :do
      - :BLOCK_SUITE
      - :end
      - 'While.new(Expression.new(syms[1].variables, "!(#{syms[1]})"), syms[3])'
  :CASE_STMT:
    - - :case
      - :CALLABLE_NAME
      - :WHENS_SUITE
      - :DEFAULT
      - 'Case.new(syms[1], syms[2], syms[3])'
  :DEFAULT:
    - - :default
      - :BLOCK_SUITE
      - :end
      - 'syms[1]'
    - - :end
      - 'nil'
  :WHENS_SUITE:
    - - :WHENS
      - 'syms[0]'
    - - :br
      - :WHENS
      - 'syms[1]'
  :WHENS:
    - - :WHEN_STMT
      - '[syms[0]]'
    - - :WHEN_STMT
      - :WHENS
      - '[syms[0]] + syms[1]'
  :WHEN_STMT:
    - - :when
      - :EXPR
      - :do
      - :BLOCK_SUITE
      - 'When.new(syms[1], syms[3])'
  :LIST:
    - - :[
      - :LIST_ARGS
      - :]
      - 'Expression.new(syms[1].variables, "[#{syms[1]}]")'
    - - :[
      - :]
      - 'Expression.new([], "[]")'
  :LIST_ARGS:
    - - :EXPR
      - 'syms[0]'
    - - :EXPR
      - :,
      - :LIST_ARGS
      - 'Expression.create(syms[0], ",", syms[2])'
  :HASH:
    - - :{
      - :HASH_ARGS
      - :}
      - 'Expression.new(syms[1].variables, "{" + syms[1].to_s + "}")'
    - - :{
      - :}
      - 'Expression.new([], "{}")'
  :HASH_ARGS:
    - - :EXPR
      - :'::'
      - :EXPR
      - 'Expression.create(syms[0], ":", syms[2])'
    - - :EXPR
      - :'::'
      - :EXPR
      - :,
      - :HASH_ARGS
      - 'Expression.new(syms[0].variables + syms[2].variables + syms[4].variables, "#{syms[0]}: #{syms[2]}, #{syms[4]}")'
  :ATOM:
    - - :CALLABLE_NAME
      - 'syms[0]'
    - - :string
      - 'Expression.new([], syms[0].lexeme)'
    - - :NUMBER
      - 'syms[0]'
    - - :(
      - :EXPR
      - :)
      - 'Expression.new(syms[1].variables, "(#{syms[1]})")'
    - - :LIST
      - 'syms[0]'
    - - :HASH
      - 'syms[0]'
    - - :BOOLEAN_OP
      - 'Expression.new([], syms[0])'
    - - :null
      - 'Expression.new([], "null")'
  :EXPR:
    - - :OR
      - 'syms[0]'
  :OR:
    - - :AND
      - 'syms[0]'
    - - :AND
      - :or
      - :OR
      - 'Expression.create(syms[0], "||", syms[2])'
  :AND:
    - - :NOT
      - 'syms[0]'
    - - :NOT
      - :and
      - :AND
      - 'Expression.create(syms[0], "&&", syms[2])'
  :NOT:
    - - :not
      - :NOT
      - 'Expression.new(syms[1].variables, "~#{syms[1]}")'
    - - :COMPARISON
      - 'syms[0]'
  :COMPARISON:
    - - :XOR
      - 'syms[0]'
    - - :XOR
      - :COMPARE_OP
      - :COMPARISON
      - 'Expression.create(syms[0], syms[1], syms[2])'
  :XOR:
    - - :BITWISE_AND
      - 'syms[0]'
    - - :BITWISE_AND
      - :^
      - :XOR
      - 'Expression.create(syms[0], "^", syms[2])'
  :BITWISE_AND:
    - - :SHIFT
      - 'syms[0]'
    - - :SHIFT
      - :&
      - :BITWISE_AND
      - 'Expression.create(syms[0], "&", syms[2])'
  :SHIFT:
    - - :ARITH_EXPR
      - 'syms[0]'
    - - :ARITH_EXPR
      - :SHIFT_OP
      - :SHIFT
      - 'Expression.create(syms[0], syms[1], syms[2])'
  :SHIFT_OP:
    - - :<<
      - '"<<"'
    - - :>>
      - '">>"'
  :ARITH_EXPR:
    - - :TERM
      - 'syms[0]'
    - - :TERM
      - :ARITH_OP
      - :ARITH_EXPR
      - 'Expression.create(syms[0], syms[1], syms[2])'
  :ARITH_OP:
    - - :+
      - '"+"'
    - - :-
      - '"-"'
  :TERM:
    - - :FACTOR
      - 'syms[0]'
    - - :FACTOR
      - :TERM_OP
      - :TERM
      - 'Expression.create(syms[0], syms[1], syms[2])'
  :TERM_OP:
    - - :*
      - '"*"'
    - - :/
      - '"/"'
    - - :%
      - '"%"'
  :FACTOR:
    - - :FACTOR_OP
      - :FACTOR
      - 'Expression.create(syms[1], "#{syms[0]}s", nil)'
    - - :POWER
      - 'syms[0]'
  :FACTOR_OP:
    - - :+
      - '"+"'
    - - :-
      - '"-"'
    - - :~
      - '"~"'
  :POWER:
    - - :ATOM
      - 'syms[0]'
    - - :ATOM
      - :**
      - :FACTOR
      - 'Expression.create(syms[0], "**", syms[2])'
